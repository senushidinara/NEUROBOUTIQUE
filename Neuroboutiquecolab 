{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP/lcXk/EHHiQwlChTiOS/t",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/senushidinara/NEUROBOUTIQUE/blob/main/Neuroboutiquecolab%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 397
        },
        "id": "CS5AkO209x2U",
        "outputId": "cfbdb5e6-66c2-46eb-c47a-d59568c986c8"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'data_model'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-4128954496.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mdata_model\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mUserProfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mProduct\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Load product data from a mock JSON file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'data_model'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ],
      "source": [
        "# backend/ai_engine/recommender.py\n",
        "\n",
        "import json\n",
        "from data_model import UserProfile, Product\n",
        "\n",
        "# Load product data from a mock JSON file\n",
        "with open('../product_data.json', 'r') as f:\n",
        "    ALL_PRODUCTS = [Product(**p) for p in json.load(f)]\n",
        "\n",
        "def get_goal_bundle(user: UserProfile, goal: str) -> list[Product]:\n",
        "    \"\"\"\n",
        "    AI Agent 1: Determines the optimal product bundle based on user profile and goal.\n",
        "\n",
        "    In a hackathon: Simplified rule-based logic.\n",
        "    In production: Sophisticated model (Collaborative Filtering or Reinforcement Learning).\n",
        "    \"\"\"\n",
        "    print(f\"Generating bundle for user {user.user_id} with goal: {goal}...\")\n",
        "\n",
        "    # 1. Identify user's current deficit/need based on tracked data\n",
        "    # (Simplified: check a 'sleep_score' or 'focus_score' from UserProfile)\n",
        "\n",
        "    # 2. Apply a rule-based system for the given goal\n",
        "    bundle_products = []\n",
        "\n",
        "    if goal == \"Focus\":\n",
        "        # Recommendation Logic: Recommend a Nootropic and a Focus Gadget\n",
        "        bundle_products.append(next(p for p in ALL_PRODUCTS if p.name == \"NeuroFocus Capsules\"))\n",
        "        bundle_products.append(next(p for p in ALL_PRODUCTS if p.name == \"NeuroTrainer Handheld\"))\n",
        "\n",
        "        # Auto-Optimization check (simplified)\n",
        "        if user.recent_mood_score < 0.5: # If user mood is low, add a mood support product\n",
        "            bundle_products.append(next(p for p in ALL_PRODUCTS if p.name == \"HappyMind Chews\"))\n",
        "\n",
        "    elif goal == \"Sleep\":\n",
        "        # Recommendation Logic: Recommend a Calm drop and a Sleep aid device\n",
        "        bundle_products.append(next(p for p in ALL_PRODUCTS if p.name == \"CalmNeuro Drops\"))\n",
        "        bundle_products.append(next(p for p in ALL_PRODUCTS if p.name == \"SleepSync Eye Mask\"))\n",
        "\n",
        "    # ... add logic for Calm, Mood, Energy\n",
        "\n",
        "    return bundle_products\n",
        "\n",
        "# --- Mock Data Structures (for clarity) ---\n",
        "class Product:\n",
        "    def __init__(self, name, category, price, description):\n",
        "        self.name = name\n",
        "        self.category = category\n",
        "        self.price = price\n",
        "        self.description = description\n",
        "\n",
        "class UserProfile:\n",
        "    def __init__(self, user_id, goals, sleep_score, focus_score, recent_mood_score):\n",
        "        self.user_id = user_id\n",
        "        self.goals = goals\n",
        "        self.sleep_score = sleep_score\n",
        "        self.focus_score = focus_score\n",
        "        self.recent_mood_score = recent_mood_score\n",
        "\n",
        "# Mock Usage:\n",
        "# user_data = UserProfile(1, [\"Focus\"], 0.6, 0.4, 0.45) # Low focus, low mood\n",
        "# recommended = get_goal_bundle(user_data, \"Focus\")\n",
        "# print([p.name for p in recommended])\n",
        "# Expected Output: ['NeuroFocus Capsules', 'NeuroTrainer Handheld', 'HappyMind Chews']\n",
        "# backend/ai_engine/recommender.py\n",
        "\n",
        "import json\n",
        "from data_model import UserProfile, Product\n",
        "\n",
        "# Load product data from a mock JSON file\n",
        "with open('../product_data.json', 'r') as f:\n",
        "    ALL_PRODUCTS = [Product(**p) for p in json.load(f)]\n",
        "\n",
        "def get_goal_bundle(user: UserProfile, goal: str) -> list[Product]:\n",
        "    \"\"\"\n",
        "    AI Agent 1: Determines the optimal product bundle based on user profile and goal.\n",
        "\n",
        "    In a hackathon: Simplified rule-based logic.\n",
        "    In production: Sophisticated model (Collaborative Filtering or Reinforcement Learning).\n",
        "    \"\"\"\n",
        "    print(f\"Generating bundle for user {user.user_id} with goal: {goal}...\")\n",
        "\n",
        "    # 1. Identify user's current deficit/need based on tracked data\n",
        "    # (Simplified: check a 'sleep_score' or 'focus_score' from UserProfile)\n",
        "\n",
        "    # 2. Apply a rule-based system for the given goal\n",
        "    bundle_products = []\n",
        "\n",
        "    if goal == \"Focus\":\n",
        "        # Recommendation Logic: Recommend a Nootropic and a Focus Gadget\n",
        "        bundle_products.append(next(p for p in ALL_PRODUCTS if p.name == \"NeuroFocus Capsules\"))\n",
        "        bundle_products.append(next(p for p in ALL_PRODUCTS if p.name == \"NeuroTrainer Handheld\"))\n",
        "\n",
        "        # Auto-Optimization check (simplified)\n",
        "        if user.recent_mood_score < 0.5: # If user mood is low, add a mood support product\n",
        "            bundle_products.append(next(p for p in ALL_PRODUCTS if p.name == \"HappyMind Chews\"))\n",
        "\n",
        "    elif goal == \"Sleep\":\n",
        "        # Recommendation Logic: Recommend a Calm drop and a Sleep aid device\n",
        "        bundle_products.append(next(p for p in ALL_PRODUCTS if p.name == \"CalmNeuro Drops\"))\n",
        "        bundle_products.append(next(p for p in ALL_PRODUCTS if p.name == \"SleepSync Eye Mask\"))\n",
        "\n",
        "    # ... add logic for Calm, Mood, Energy\n",
        "\n",
        "    return bundle_products\n",
        "\n",
        "# --- Mock Data Structures (for clarity) ---\n",
        "class Product:\n",
        "    def __init__(self, name, category, price, description):\n",
        "        self.name = name\n",
        "        self.category = category\n",
        "        self.price = price\n",
        "        self.description = description\n",
        "\n",
        "class UserProfile:\n",
        "    def __init__(self, user_id, goals, sleep_score, focus_score, recent_mood_score):\n",
        "        self.user_id = user_id\n",
        "        self.goals = goals\n",
        "        self.sleep_score = sleep_score\n",
        "        self.focus_score = focus_score\n",
        "        self.recent_mood_score = recent_mood_score\n",
        "\n",
        "# Mock Usage:\n",
        "# user_data = UserProfile(1, [\"Focus\"], 0.6, 0.4, 0.45) # Low focus, low mood\n",
        "# recommended = get_goal_bundle(user_data, \"Focus\")\n",
        "# print([p.name for p in recommended])\n",
        "# Expected Output: ['NeuroFocus Capsules', 'NeuroTrainer Handheld', 'HappyMind Chews']\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Colab Cell 1: Setup & Dependencies\n",
        "# You only need standard Python libraries for the rule-based MVP\n",
        "# If you decide to upgrade to a more complex model:\n",
        "# !pip install pandas scikit-learn\n",
        "print(\"Setup complete. Ready to define the NeuroBoutique AI Engine.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H1Zayqnv94Ks",
        "outputId": "696f56f4-eb83-41d4-eac7-fed4e67d99ea"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Setup complete. Ready to define the NeuroBoutique AI Engine.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Colab Cell 2: Data Models and Product Catalog\n",
        "\n",
        "# --- Data Structures (from data_model.py) ---\n",
        "class Product:\n",
        "    def __init__(self, name, category, price, description):\n",
        "        self.name = name\n",
        "        self.category = category\n",
        "        self.price = price\n",
        "        self.description = description\n",
        "\n",
        "class UserProfile:\n",
        "    def __init__(self, user_id, goals, sleep_score, focus_score, recent_mood_score):\n",
        "        self.user_id = user_id\n",
        "        self.goals = goals\n",
        "        self.sleep_score = sleep_score # Tracked Data (e.g., 0.0 to 1.0)\n",
        "        self.focus_score = focus_score # Tracked Data\n",
        "        self.recent_mood_score = recent_mood_score # Tracked Data\n",
        "\n",
        "# --- Mock Product Data (from product_data.json) ---\n",
        "PRODUCT_DATA = [\n",
        "    {\"name\": \"NeuroFocus Capsules\", \"category\": \"Focus\", \"price\": 39.99, \"description\": \"Nootropic for focus.\"},\n",
        "    {\"name\": \"Cogniva Gummies\", \"category\": \"Memory\", \"price\": 24.99, \"description\": \"Vitamins for recall.\"},\n",
        "    {\"name\": \"CalmNeuro Drops\", \"category\": \"Calm\", \"price\": 29.99, \"description\": \"Drops for restful states.\"},\n",
        "    {\"name\": \"NeuroTrainer Handheld\", \"category\": \"Gadget\", \"price\": 149.00, \"description\": \"Cognitive trainer.\"},\n",
        "    {\"name\": \"SleepSync Eye Mask\", \"category\": \"Sleep\", \"price\": 34.99, \"description\": \"Smart mask for sleep.\"},\n",
        "    {\"name\": \"HappyMind Chews\", \"category\": \"Mood\", \"price\": 14.99, \"description\": \"Chews to support mood.\"},\n",
        "]\n",
        "ALL_PRODUCTS = [Product(**p) for p in PRODUCT_DATA]\n",
        "\n",
        "# Define a Mock User (The \"Multi-modal Tracking\" data)\n",
        "MOCK_USER_DATA = UserProfile(\n",
        "    user_id=101,\n",
        "    goals=[\"Focus\"],\n",
        "    sleep_score=0.7, # Good Sleep\n",
        "    focus_score=0.4, # Low Focus (Needs help!)\n",
        "    recent_mood_score=0.5 # Neutral Mood\n",
        ")\n",
        "\n",
        "print(f\"User ID {MOCK_USER_DATA.user_id} tracked metrics loaded. Focus Score: {MOCK_USER_DATA.focus_score}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZypQhxRa96LY",
        "outputId": "ffa37f07-3000-42b5-f159-dce59ea636c4"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "User ID 101 tracked metrics loaded. Focus Score: 0.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Colab Cell 3: AI Recommendation Engine (Goal-based Bundles)\n",
        "\n",
        "def get_goal_bundle(user: UserProfile, goal: str) -> list[Product]:\n",
        "    \"\"\"\n",
        "    AI Agent 1: Determines the optimal product bundle based on user profile and goal.\n",
        "    \"\"\"\n",
        "    print(f\"\\n--- AI Agent 1: Recommending Bundle for Goal: {goal} ---\")\n",
        "\n",
        "    bundle_products = []\n",
        "\n",
        "    if goal == \"Focus\":\n",
        "        # 1. Base Recommendation\n",
        "        bundle_products.append(next(p for p in ALL_PRODUCTS if p.name == \"NeuroFocus Capsules\"))\n",
        "\n",
        "        # 2. Auto-Optimization check based on tracked data\n",
        "        if user.focus_score < 0.5: # If user focus is low, add a gadget for training\n",
        "            print(\"Optimization: Focus score is low (0.4). Adding Cognitive Trainer.\")\n",
        "            bundle_products.append(next(p for p in ALL_PRODUCTS if p.name == \"NeuroTrainer Handheld\"))\n",
        "\n",
        "        if user.sleep_score < 0.6: # If user sleep is low, address the root cause\n",
        "            print(\"Optimization: Sleep score is low. Adding Sleep Aid.\")\n",
        "            bundle_products.append(next(p for p in ALL_PRODUCTS if p.name == \"SleepSync Eye Mask\"))\n",
        "\n",
        "    # ... (add other goal logic)\n",
        "\n",
        "    return bundle_products\n",
        "\n",
        "# --- Run the Recommendation Demo ---\n",
        "RECOMMENDED_BUNDLE = get_goal_bundle(MOCK_USER_DATA, \"Focus\")\n",
        "\n",
        "print(\"\\n🤖 NeuroBoutique Recommendation:\")\n",
        "for i, p in enumerate(RECOMMENDED_BUNDLE):\n",
        "    print(f\"{i+1}. {p.name} ({p.category}) - ${p.price}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QpuEGFqD98YU",
        "outputId": "1aa71d1a-4b6e-46ca-bf3e-e493ccf8f6ec"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- AI Agent 1: Recommending Bundle for Goal: Focus ---\n",
            "Optimization: Focus score is low (0.4). Adding Cognitive Trainer.\n",
            "\n",
            "🤖 NeuroBoutique Recommendation:\n",
            "1. NeuroFocus Capsules (Focus) - $39.99\n",
            "2. NeuroTrainer Handheld (Gadget) - $149.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Colab Cell 4: Simulation Engine (Predicted Outcomes)\n",
        "\n",
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd # Used for clean data presentation\n",
        "\n",
        "# --- Simulation Logic ---\n",
        "def run_simulation(current_metrics: dict, bundle: list[Product], duration_weeks: int = 8) -> pd.DataFrame:\n",
        "    \"\"\"\n",
        "    AI Agent 2: Predicts week-by-week outcome of a product bundle, returning a Pandas DataFrame.\n",
        "    \"\"\"\n",
        "    print(f\"\\n--- AI Agent 2: Running {duration_weeks}-Week Simulation ---\")\n",
        "\n",
        "    IMPACT_MAP = {\n",
        "        \"Focus\": {'focus': 0.15, 'mood': 0.05},\n",
        "        \"Gadget\": {'focus': 0.1, 'processing_speed': 0.1},\n",
        "        \"Sleep\": {'sleep': 0.2, 'mood': 0.05},\n",
        "    }\n",
        "\n",
        "    total_impact = {metric: 0 for metric in current_metrics} # Initialize impact\n",
        "    for product in bundle:\n",
        "        for metric, boost in IMPACT_MAP.get(product.category, {}).items():\n",
        "            if metric in total_impact:\n",
        "                 total_impact[metric] += boost\n",
        "\n",
        "    # Simulation\n",
        "    simulation_data = {metric: [value] for metric, value in current_metrics.items()}\n",
        "    current_metrics_copy = current_metrics.copy()\n",
        "\n",
        "    for week in range(1, duration_weeks + 1):\n",
        "        for metric in current_metrics_copy:\n",
        "            base_increase = total_impact.get(metric, 0)\n",
        "            noise = random.uniform(-0.01, 0.02)\n",
        "\n",
        "            # Simple growth model (diminishing returns)\n",
        "            new_value = min(1.0, current_metrics_copy[metric] + (base_increase * (1 - current_metrics_copy[metric])) + noise)\n",
        "\n",
        "            current_metrics_copy[metric] = new_value\n",
        "            simulation_data[metric].append(new_value)\n",
        "\n",
        "    return pd.DataFrame(simulation_data, index=[f'Week {i}' for i in range(duration_weeks + 1)])\n",
        "\n",
        "\n",
        "# --- Run the Simulation Demo ---\n",
        "CURRENT_METRICS = {\n",
        "    'focus': MOCK_USER_DATA.focus_score,\n",
        "    'sleep': MOCK_USER_DATA.sleep_score,\n",
        "    'mood': MOCK_USER_DATA.recent_mood_score\n",
        "}\n",
        "PREDICTED_OUTCOMES = run_simulation(CURRENT_METRICS, RECOMMENDED_BUNDLE, duration_weeks=8)\n",
        "\n",
        "# --- Visualization for Hackathon Demo ---\n",
        "plt.figure(figsize=(10, 6))\n",
        "for column in PREDICTED_OUTCOMES.columns:\n",
        "    plt.plot(PREDICTED_OUTCOMES.index, PREDICTED_OUTCOMES[column], label=column.capitalize(), marker='o', markersize=4)\n",
        "\n",
        "plt.title('NeuroBoutique AI Simulation: Predicted Outcomes over 8 Weeks')\n",
        "plt.xlabel('Time')\n",
        "plt.ylabel('Metric Score (0.0 to 1.0)')\n",
        "plt.legend()\n",
        "plt.grid(True, linestyle='--')\n",
        "plt.ylim(0, 1)\n",
        "plt.show()\n",
        "\n",
        "# Display the final projected scores\n",
        "print(\"\\nFinal Projected Scores (After 8 Weeks):\")\n",
        "print(PREDICTED_OUTCOMES.iloc[-1].round(3))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 708
        },
        "id": "Pnele-B3-AzI",
        "outputId": "80abf22b-54a6-41a2-d24c-c8448fc564cf"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- AI Agent 2: Running 8-Week Simulation ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Final Projected Scores (After 8 Weeks):\n",
            "focus    0.962\n",
            "sleep    0.721\n",
            "mood     0.674\n",
            "Name: Week 8, dtype: float64\n"
          ]
        }
      ]
    }
  ]
}